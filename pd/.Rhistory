shiny::runApp('git_repositories/meristogram/GUI')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
shinyApp(
ui = fluidPage(
strong("Selected colour:", textOutput("value", inline = TRUE)),
colourInput("col", "Choose colour", "red"),
h3("Update colour input"),
textInput("text", "New colour: (colour name or HEX value)"),
selectInput("showColour", "Show colour",
c("both", "text", "background")),
selectInput("palette", "Colour palette",
c("square", "limited")),
checkboxInput("allowTransparent", "Allow transparent", FALSE),
checkboxInput("returnName", "Return R colour name", FALSE),
actionButton("btn", "Update")
),
server = function(input, output, session) {
observeEvent(input$btn, {
updateColourInput(session, "col",
value = input$text, showColour = input$showColour,
allowTransparent = input$allowTransparent,
palette = input$palette,
returnName = input$returnName)
})
output$value <- renderText(input$col)
}
)
shinyApp(
ui = fluidPage(
strong("Selected colour:", textOutput("value", inline = TRUE)),
colourInput("col", "Choose colour", "red"),
h3("Update colour input"),
textInput("text", "New colour: (colour name or HEX value)"),
selectInput("showColour", "Show colour",
c("both", "text", "background")),
selectInput("palette", "Colour palette",
c("square", "limited")),
checkboxInput("allowTransparent", "Allow transparent", FALSE),
checkboxInput("returnName", "Return R colour name", FALSE),
actionButton("btn", "Update")
),
server = function(input, output, session) {
observeEvent(input$btn, {
updateColourInput(session, "col",
value = input$text, showColour = input$showColour,
allowTransparent = input$allowTransparent,
palette = input$palette,
returnName = input$returnName)
})
output$value <- renderText(input$col)
}
)
install.packages("colourpicker")
library(colourpicker)
runApp('tmp/test_colourpicker.R')
?colourInput
runApp('tmp/test_colourpicker.R')
runApp('tmp/test_colourpicker.R')
runApp('tmp/test_colourpicker.R')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('tmp/test_colourpicker.R')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/meristogram/GUI')
library(ggplot2)
dat <- read.csv("data/data.csv", row.names=1)
getwd()
setwd("/Users/matt/git_repositories"
)
list.files()
setwd("Hastings-PD-Cx43-shiny")
setwd("pd")
list.files()
setwd("data")
list.files
list.files()
setwd("../")
dat <- read.csv("data/data.csv", row.names=1)
dat$Group <- as.factor(dat$Group)
dat$Dementia...cognitive.impairment <- as.factor(dat$Dementia...cognitive.impairment)
dat$Depression <- factor(dat$Depression)
dat$Memory.problems <- as.factor(dat$Memory.problems)
dat$Sleep.disturbance <- as.factor(dat$Sleep.disturbance)
dat$Aggression <- as.factor(dat$Aggression)
dat$Hallucinations <- as.factor(dat$Hallucinations)
dat$Psychotic.symptoms <- as.factor(dat$Psychotic.symptoms)
dat$LB.disease.type <- factor(dat$LB.disease.type)
dat$LB.Braak.stage <- factor(dat$LB.Braak.stage, ordered=TRUE)
dat$SN.depigmentation <- factor(dat$SN.depigmentation, ordered=TRUE)
dat$Amyloid.pathology <- factor(dat$Amyloid.pathology, ordered=TRUE)
dat$Tau.pathology <- factor(dat$Tau.pathology, ordered=TRUE)
dat$Vessel.disease...CAA <- factor(dat$Vessel.disease...CAA, ordered=TRUE)
dat$Age <- as.numeric(dat$Age)
dat$PD.duration <- as.numeric(dat$PD.duration)
dat$Gender <- as.factor(dat$Gender)
hist(dat$Gender)
hist(dat$Dementia...cognitive.impairment)
hist(dat$Age)
table(dat$Age)
table(dat$Aggression)
hist(dat$PD.duration)
View(dat)
runApp()
names(dat)[12]
runApp()
names(dat)[1]
names(dat)[2]
runApp()
names(dat)[1:10]
names(dat)[6]
runApp()
names(dat)[10:20]
names(dat)[1:20]
names(dat)[11]
names(dat)[13]
runApp()
names(dat)[3]
names(dat)[14]
names(dat)[15]
names(dat)[16]
dat$LB.disease.type
names(dat)[17]
names(dat)[18]
runApp()
names(dat)
names(dat)[19]
names(dat)[20]
names(dat)[21]
runApp()
names(dat)[22]
names(dat)[23]
names(dat)[24]
names(dat)[25]
names(dat)[26]
names(dat)[27]
runApp()
names(dat)[28:30]
names(dat)[31:50]
names(dat)[31:37]
runApp()
27.50*12
12*27
(5*25) + (2*25) + (8*20)
228.84/6
1254+333.73
1587.73*12
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPlot
runApp()
runApp()
?ggplot
runApp()
library(shiny)
library(ggplot2)
dat <- read.csv("data/data.csv", row.names=1)
dat$Group <- as.factor(dat$Group)
dat$Dementia...cognitive.impairment <- as.factor(dat$Dementia...cognitive.impairment)
dat$Depression <- factor(dat$Depression)
dat$Memory.problems <- as.factor(dat$Memory.problems)
dat$Sleep.disturbance <- as.factor(dat$Sleep.disturbance)
dat$Aggression <- as.factor(dat$Aggression)
dat$Hallucinations <- as.factor(dat$Hallucinations)
dat$Psychotic.symptoms <- as.factor(dat$Psychotic.symptoms)
dat$LB.disease.type <- factor(dat$LB.disease.type)
dat$LB.Braak.stage <- factor(dat$LB.Braak.stage, ordered=TRUE)
dat$SN.depigmentation <- factor(dat$SN.depigmentation, ordered=TRUE)
dat$Amyloid.pathology <- factor(dat$Amyloid.pathology, ordered=TRUE)
dat$Tau.pathology <- factor(dat$Tau.pathology, ordered=TRUE)
dat$Vessel.disease...CAA <- factor(dat$Vessel.disease...CAA, ordered=TRUE)
dat$Age <- as.numeric(dat$Age)
dat$PD.duration <- as.numeric(dat$PD.duration)
dat$Gender <- as.factor(dat$Gender)
names(dat)[2] <- "Brain Bank ID"
names(dat)[3] <- "Age (years)"
names(dat)[5] <- "Amyloid pathology"
names(dat)[6] <- "Dementia / cognitive impairment"
names(dat)[10] <- "LB Braak stage"
names(dat)[11] <- "LB disease type"
names(dat)[12] <- "Memory problems"
names(dat)[13] <- "PD duration (years)"
names(dat)[14] <- "Psychotic symptoms"
names(dat)[15] <- "Sleep disturbance"
names(dat)[16] <- "Substantia nigra depigmentation"
names(dat)[17] <- "Tau pathology"
names(dat)[18] <- "Vessel disease / cerebral amyloid angiopathy"
names(dat)[19] <- "ALdh1L1 expression in substantia nigra"
names(dat)[20] <- "Aldh1L1 expression in parietal cortex"
names(dat)[21] <- "Aldh1l1 expression in striatum of basal ganglia"
names(dat)[22] <- "Cx43 expression in substantia nigra"
names(dat)[23] <- "Cx43 expression in parietal cortex"
names(dat)[24] <- "Cx43 expression in striatum of basal ganglia"
names(dat)[25] <- "GDNF expression in substantia nigra"
names(dat)[26] <- "GDNF expression in parietal cortex"
names(dat)[27] <- "GDNF expression in striatum of basal ganglia"
names(dat)[28] <- "GFAP expression in substantia nigra"
names(dat)[29] <- "GFAP expression in parietal cortex"
names(dat)[30] <- "GFAP expression in striatum of basal ganglia"
names(dat)[31] <- "Puncta per cell in caudate nucleus of basal ganglia"
names(dat)[32] <- "Puncta per cell in globus pallidus of basal ganglia"
names(dat)[33] <- "Puncta per cell in putamen of basal ganglia"
names(dat)[34] <- "Puncta per cell in frontal cortex"
names(dat)[35] <- "Puncta per cell in insular cortex"
names(dat)[36] <- "Puncta per cell in substantia nigra"
names(dat)[37] <- "Puncta per cell in parietal cortex"
names(dat)
ggplot(data=dat, aes(x="Cx43 expression in substantia nigra")) + geom_histogram()
ggplot(data=dat, aes(x="Cx43 expression in substantia nigra")) + geom_histogram() + stat_bin()
ggplot(data=dat, aes(x="Cx43 expression in substantia nigra")) + geom_histogram(stat="count")
hist(dat$`Puncta per cell in globus pallidus of basal ganglia`)
is.numeric(dat$`Puncta per cell in substantia nigra`)
ggplot(data=dat, aes("Cx43 expression in substantia nigra")) + geom_histogram()
ggplot(data=dat, aes("Cx43 expression in substantia nigra")) + geom_histogram(y=..count..)
?spatstat
??spatstat
ggplot(data=dat, aes("Cx43 expression in substantia nigra")) + geom_histogram(aes(y=..count..))
library(ggplot2)
ggplot(data=dat, aes("Cx43 expression in substantia nigra")) + geom_histogram(aes(y=..count..))
dat$`Cx43 expression in substantia nigra`
is.numeric(dat$`Cx43 expression in substantia nigra`)
hist(dat$`Cx43 expression in substantia nigra`)
df <- dat
names(df)
names(df)[3]
names(df)[3] <- age
names(df)[3] <- "age"
df
ggplot(data=dat, aes("age")) + geom_histogram(aes(y=..count..))
ggplot(data=dat, aes(age)) + geom_histogram(aes(y=..count..))
ggplot(data=df, aes(age)) + geom_histogram(aes(y=..count..))
ggplot(data=df, aes(age)) + geom_histogram(aes(y=..count..))
ggplot(data=df, aes("age")) + geom_histogram(aes(y=..count..))
ggplot(data=dat, aes(`Cx43 expression in substantia nigra`)) + geom_histogram(aes(y=..count..))
ggplot(data=dat, aes(`Cx43 expression in substantia nigra`)) + geom_histogram()
dat$`GDNF expression in substantia nigra`
ggplot(data=dat, aes(get("Cx43 expression in substantia nigra"))) + geom_histogram(aes(y=..count..))
runApp()
runApp()
?renderPlot
runApp()
runApp('~/git_repositories/meristogram/GUI')
runApp()
7970-5890
runApp()
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
?fitdistrplus
fitdist(c(rep(1,7)), "poisson")
?dpoisson
fitdist(c(rep(1,7)), "pois")
x <- fitdist(c(rep(1,7)), "pois")
x
names(x)
x$estimate
x$data
x$dots
x$discrete
x$distname
plot(x)
?rpois
rpois(7,1)
rpois(7,1)
rpois(7,1)
rpois(7,1)
rpois(7,1)
rpois(7,1)
rpois(7,1)
x <- rpois(7000,1)
x
m <- matrix(x, ncol=7)
View(m)
x <- matrix(rpois(1,7000), ncol=7)
rm(m)
View(x)
x <- matrix((rpois(1,7000)), ncol=7)
x <- matrix(expr(rpois(1,7000)), ncol=7)
x <- matrix(rpois(1,7000), ncol=7)
dim(x)
x <- matrix(c(rpois(1,7000)), ncol=7)
dim(x)
x <- rpois(1,7000)
dim(x)
length(x)
x
is.vector(x)
is.list(x)
length(x)
length(x[1])
length(x[[1]])
sum(x)
count(x)
View(x)
x <- rpois(1,7000)
x
x <- matrix(rpois(7000, 1), ncol=7)
dim(x)
cost
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x=0,0,x-1)
x <- sum(x)
cost <- x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 1), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 1), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
mean(laserCover)
mean(noLaserCover)
summary(laserCover)
summary(noLaserCover)
7*laserPrice
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 1), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 1), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
hist(laserCover)
hist(noLaserCover)
laserIncluded(c(1,1,1,1,1,1,1))
laserExcluded(c(1,1,1,1,1,1,1))
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 2), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
laserIncluded(c(1,1,0,1,0,1,0))
laserExcluded(c(1,1,0,1,0,1,0))
7*costCoverOneLaser
4*laserPrice
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 0.5), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 1), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 1), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 0.5), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
laserPrice <- 5890
costCoverOneLaser <- 2080
laserIncluded <- function(x) {
cost <- 7 * costCoverOneLaser
x <- ifelse(x==0,0,x-1)
x <- sum(x)
cost <- cost + x*laserPrice
return(cost)
}
laserExcluded <- function(x) {
cost <- sum(x) * laserPrice
return(cost)
}
# failures over seven years, replicated 1000 times
failures <- matrix(rpois(7000, 2), ncol=7)
laserCover <- apply(failures,1,laserIncluded)
noLaserCover <- apply(failures,1,laserExcluded)
summary(laserCover)
summary(noLaserCover)
5890*7
costCoverOneLaser*7
?rpois
1000/5
200/8
36/5
52-7
50000/45
1111/5
222/8
