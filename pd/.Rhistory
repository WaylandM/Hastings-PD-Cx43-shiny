dn <- data.frame(matrix(data=NA, nrow=dim(roi1BS)[1], ncol=dim(roi1BS)[2]))
dim(dn)
length(roi1prebleachBS)
dim(roi2BS)
timePoints
# Chunk 1
library(RColorBrewer)
library(stringr)
# Chunk 2
roi1 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI1 FRAP Area 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi1 <- roi1[roi1$Timepoint!="",]
roi1 <- roi1[,2:dim(roi1)[2]]
roi1prebleach <- as.numeric(as.vector(roi1[1,]))
roi1 <- roi1[2:dim(roi1)[1],]
# Chunk 3
roi2 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI2 Cytoplasmic Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi2 <- roi2[roi2$Timepoint!="",]
roi2 <- roi2[,2:dim(roi2)[2]]
roi2prebleach <- as.numeric(as.vector(roi2[1,]))
roi2 <- roi2[2:dim(roi2)[1],]
# Chunk 4
roi3 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI3 Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi3 <- roi3[roi3$Timepoint!="",]
roi3 <- roi3[,2:dim(roi3)[2]]
roi3prebleach <- as.numeric(as.vector(roi3[1,]))
roi3 <- roi3[2:dim(roi3)[1],]
# Chunk 5
timePoints <- c(0, 30, 60, 90, 120, 150, 180)
# Chunk 6
roi1Col <- "#E7298A"
roi2Col <- "#66A61E"
roi3Col <- "#7570B3"
for(i in 1:dim(roi1)[2]){
plot(timePoints, roi1[,i], ylab="signal intensity", xlab="time (seconds)",
main=str_c("experiment ", i), type="l", lty=1, col=roi1Col,
ylim=c(0,roi1prebleach[i]))
abline(h=roi1prebleach[i], col=roi1Col, lty=3)
lines(timePoints, roi2[,i], lty=1, col=roi2Col)
abline(h=roi2prebleach[i], col=roi2Col, lty=3)
lines(timePoints, roi3[,i], lty=1, col=roi3Col)
abline(h=roi3prebleach[i], col=roi3Col, lty=3)
}
# Chunk 7
roi1BS <- roi1-roi3
roi1prebleachBS <- roi1prebleach - roi3prebleach
# Chunk 8
roi2BS <- roi2-roi3
roi2prebleachBS <- roi2prebleach - roi3prebleach
# Chunk 9
bd <- (roi1prebleachBS-roi1BS[1,])/roi1prebleachBS
# Chunk 10
bd <- data.frame(t(bd))
names(bd) <- c("Experiement", "Bleach Depth")
dim(bd)
is.vector(bd)
View(bd)
5/c(1,2,3,4,5)
x
y
x*y
rm(list=ls())
ls()
library(RColorBrewer)
library(stringr)
roi1 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI1 FRAP Area 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi1 <- roi1[roi1$Timepoint!="",]
roi1 <- roi1[,2:dim(roi1)[2]]
roi1prebleach <- as.numeric(as.vector(roi1[1,]))
roi1 <- roi1[2:dim(roi1)[1],]
roi2 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI2 Cytoplasmic Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi2 <- roi2[roi2$Timepoint!="",]
roi2 <- roi2[,2:dim(roi2)[2]]
roi2prebleach <- as.numeric(as.vector(roi2[1,]))
roi2 <- roi2[2:dim(roi2)[1],]
roi3 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI3 Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi3 <- roi3[roi3$Timepoint!="",]
roi3 <- roi3[,2:dim(roi3)[2]]
roi3prebleach <- as.numeric(as.vector(roi3[1,]))
roi3 <- roi3[2:dim(roi3)[1],]
View(roi1)
View(roi2)
View(roi3)
timePoints <- c(0, 30, 60, 90, 120, 150, 180)
roi1Col <- "#E7298A"
roi2Col <- "#66A61E"
roi3Col <- "#7570B3"
for(i in 1:dim(roi1)[2]){
plot(timePoints, roi1[,i], ylab="signal intensity", xlab="time (seconds)",
main=str_c("experiment ", i), type="l", lty=1, col=roi1Col,
ylim=c(0,roi1prebleach[i]))
abline(h=roi1prebleach[i], col=roi1Col, lty=3)
lines(timePoints, roi2[,i], lty=1, col=roi2Col)
abline(h=roi2prebleach[i], col=roi2Col, lty=3)
lines(timePoints, roi3[,i], lty=1, col=roi3Col)
abline(h=roi3prebleach[i], col=roi3Col, lty=3)
}
roi1BS <- roi1-roi3
roi1prebleachBS <- roi1prebleach - roi3prebleach
roi2BS <- roi2-roi3
roi2prebleachBS <- roi2prebleach - roi3prebleach
bd <- (roi1prebleachBS-roi1BS[1,])/roi1prebleachBS
bd <- data.frame(t(bd))
names(bd) <- c("Bleach Depth")
knitr::kable(bd)
boxplot(bd, ylab="Bleach Depth")
dn <- data.frame(matrix(data=NA, nrow=dim(roi1BS)[1], ncol=dim(roi1BS)[2]))
names(dn) <- names(roi1BS)
for (i in 1:dim(dn)[2]) {
dn[,i] <- roi1BS[,i]/roi1prebleachBS[i]
}
View(dn)
0.9/1
0.9/2
18/20
rm(list=ls())
library(RColorBrewer)
library(stringr)
roi1 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI1 FRAP Area 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi1 <- roi1[roi1$Timepoint!="",]
roi1 <- roi1[,2:dim(roi1)[2]]
roi1prebleach <- as.numeric(as.vector(roi1[1,]))
roi1 <- roi1[2:dim(roi1)[1],]
roi2 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI2 Cytoplasmic Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi2 <- roi2[roi2$Timepoint!="",]
roi2 <- roi2[,2:dim(roi2)[2]]
roi2prebleach <- as.numeric(as.vector(roi2[1,]))
roi2 <- roi2[2:dim(roi2)[1],]
roi3 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI3 Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi3 <- roi3[roi3$Timepoint!="",]
roi3 <- roi3[,2:dim(roi3)[2]]
roi3prebleach <- as.numeric(as.vector(roi3[1,]))
roi3 <- roi3[2:dim(roi3)[1],]
timePoints <- c(0, 30, 60, 90, 120, 150, 180)
roi1Col <- "#E7298A"
roi2Col <- "#66A61E"
roi3Col <- "#7570B3"
for(i in 1:dim(roi1)[2]){
plot(timePoints, roi1[,i], ylab="signal intensity", xlab="time (seconds)",
main=str_c("experiment ", i), type="l", lty=1, col=roi1Col,
ylim=c(0,roi1prebleach[i]))
abline(h=roi1prebleach[i], col=roi1Col, lty=3)
lines(timePoints, roi2[,i], lty=1, col=roi2Col)
abline(h=roi2prebleach[i], col=roi2Col, lty=3)
lines(timePoints, roi3[,i], lty=1, col=roi3Col)
abline(h=roi3prebleach[i], col=roi3Col, lty=3)
}
roi1BS <- roi1-roi3
roi1prebleachBS <- roi1prebleach - roi3prebleach
roi2BS <- roi2-roi3
roi2prebleachBS <- roi2prebleach - roi3prebleach
bd <- (roi1prebleachBS-roi1BS[1,])/roi1prebleachBS
bd <- data.frame(t(bd))
names(bd) <- c("Bleach Depth")
knitr::kable(bd)
boxplot(bd, ylab="Bleach Depth")
dn <- data.frame(matrix(data=NA, nrow=dim(roi1BS)[1], ncol=dim(roi1BS)[2]))
names(dn) <- names(roi1BS)
for (i in 1:dim(dn)[2]) {
dn[,i] <- roi1BS[,i]/roi1prebleachBS[i]
}
View(dn)
0.5*0.5
0.5*1.23
0.5*2.1
roi2prebleachBS[1]
roi2BS[,1]
roi2prebleachBS[1]/roi2BS[,1]
roi2prebleachBS[2]/roi2BS[,2]
roi2prebleachBS[8]/roi2BS[,8]
1.9*.5
1.9*.6
dn <- dn/roi2BS
for (i in 1:dim(dn)[2]) {
dn[,i] <- dn[,i] * roi2prebleachBS[i]
}
#for (i in 1:dim(dn)[2]) {
#  dn[,i] <- dn[,i] * (roi2prebleachBS[i]/roi2BS[,i])
#}
dim(dn)
plot(roi1BS[,1],dn[,1]))
plot(roi1BS[,1],dn[,1])
plot(timePoints,dn[,1])
plot(timePoints,roi1BS[,1])
plot(timePoints,roi1BS[,1])
plot(timePoints,roi1BS[,2])
plot(timePoints,dn[,2])
plot(timePoints,roi1BS[,3])
plot(timePoints,dn[,3])
roi1 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI1 FRAP Area 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi1 <- roi1[roi1$Timepoint!="",]
roi1 <- roi1[,2:dim(roi1)[2]]
roi1prebleach <- as.numeric(as.vector(roi1[1,]))
roi1 <- roi1[2:dim(roi1)[1],]
roi2 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI2 Cytoplasmic Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi2 <- roi2[roi2$Timepoint!="",]
roi2 <- roi2[,2:dim(roi2)[2]]
roi2prebleach <- as.numeric(as.vector(roi2[1,]))
roi2 <- roi2[2:dim(roi2)[1],]
roi1
roi2
140+210
350/2
sample(c(LETTERS, letters, 0:9))
sample(c(LETTERS, letters, 0:9), 10)
sample(c(LETTERS, letters, 0:9), 10)
2/3 * 5/4
3/2*4/5
preB <- 0.8
postB <- 0.2
x <- 0.9
(x-postB)/(1-postB)
(1-postB)/(1-postB)
1200/1900
(900/1600)
(1000/1700)
(1000/1700) * (50/55)
(1000/1700) * (55/50)
(1000/1700) * (100/75)
rm(list=ls())
library(RColorBrewer)
library(stringr)
roi1 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI1 FRAP Area 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi1 <- roi1[roi1$Timepoint!="",]
roi1 <- roi1[,2:dim(roi1)[2]]
roi1prebleach <- as.numeric(as.vector(roi1[1,]))
roi1 <- roi1[2:dim(roi1)[1],]
roi2 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI2 Cytoplasmic Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi2 <- roi2[roi2$Timepoint!="",]
roi2 <- roi2[,2:dim(roi2)[2]]
roi2prebleach <- as.numeric(as.vector(roi2[1,]))
roi2 <- roi2[2:dim(roi2)[1],]
roi3 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI3 Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi3 <- roi3[roi3$Timepoint!="",]
roi3 <- roi3[,2:dim(roi3)[2]]
roi3prebleach <- as.numeric(as.vector(roi3[1,]))
roi3 <- roi3[2:dim(roi3)[1],]
timePoints <- c(0, 30, 60, 90, 120, 150, 180)
roi1Col <- "#E7298A"
roi2Col <- "#66A61E"
roi3Col <- "#7570B3"
for(i in 1:dim(roi1)[2]){
plot(timePoints, roi1[,i], ylab="signal intensity", xlab="time (seconds)",
main=str_c("experiment ", i), type="l", lty=1, col=roi1Col,
ylim=c(0,roi1prebleach[i]))
abline(h=roi1prebleach[i], col=roi1Col, lty=3)
lines(timePoints, roi2[,i], lty=1, col=roi2Col)
abline(h=roi2prebleach[i], col=roi2Col, lty=3)
lines(timePoints, roi3[,i], lty=1, col=roi3Col)
abline(h=roi3prebleach[i], col=roi3Col, lty=3)
}
roi1prebleach
roi2prebleach
roi3prebleach
View(roi1)
roi1BS <- roi1-roi3
roi1prebleachBS <- roi1prebleach - roi3prebleach
roi2BS <- roi2-roi3
roi2prebleachBS <- roi2prebleach - roi3prebleach
roi1[1:5,1:5]
roi1BS[1:5,1:5]
roi2[1:5,1:5]
roi2BS[1:5,1:5]
bd <- (roi1prebleachBS-roi1BS[1,])/roi1prebleachBS
bd <- data.frame(t(bd))
names(bd) <- c("Bleach Depth")
knitr::kable(bd)
boxplot(bd, ylab="Bleach Depth")
dn <- data.frame(matrix(data=NA, nrow=dim(roi1BS)[1], ncol=dim(roi1BS)[2]))
names(dn) <- names(roi1BS)
for (i in 1:dim(dn)[2]) {
dn[,i] <- roi1BS[,i]/roi1prebleachBS[i]
}
dn[1:5,1:5]
roi1BS[1,1]/roi1prebleachBS
roi1BS[1,1]/roi1prebleachBS[1]
roi1BS[1,2]/roi1prebleachBS[2]
dnBackup <- dn
#dn <- dn/roi2BS
#for (i in 1:dim(dn)[2]) {
#dn[,i] <- dn[,i] * roi2prebleachBS[i]
#}
for (i in 1:dim(dn)[2]) {
dn[,i] <- dn[,i] * (roi2prebleachBS[i]/roi2BS[,i])
}
dn[1:5,1:5]
dim(dn)
dim(roi2BS)
dim(dn)[2]
dn[,1]
roi2prebleachBS[1]/roi2BS[,1]
roi2prebleachBS
roi2prebleachBS[1]
dnBackup[,1]*roi2prebleachBS[1]/roi2BS[,1]
dnBackup[,8]*roi2prebleachBS[8]/roi2BS[,8]
roi2prebleachBS[8]/roi2BS[,8]
200/150
200/130
200/160
200/110
dim(roi2BS)
library(RColorBrewer)
library(stringr)
roi1 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI1 FRAP Area 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi1 <- roi1[roi1$Timepoint!="",]
roi1 <- roi1[,2:dim(roi1)[2]]
roi1prebleach <- as.numeric(as.vector(roi1[1,]))
roi1 <- roi1[2:dim(roi1)[1],]
roi2 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI2 Cytoplasmic Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi2 <- roi2[roi2$Timepoint!="",]
roi2 <- roi2[,2:dim(roi2)[2]]
roi2prebleach <- as.numeric(as.vector(roi2[1,]))
roi2 <- roi2[2:dim(roi2)[1],]
roi3 <- read.csv("/Users/matt/Cam_Dropbox/Elise/data/ROI3 Background 180s.csv", stringsAsFactors = F, na.strings="N/A")
roi3 <- roi3[roi3$Timepoint!="",]
roi3 <- roi3[,2:dim(roi3)[2]]
roi3prebleach <- as.numeric(as.vector(roi3[1,]))
roi3 <- roi3[2:dim(roi3)[1],]
timePoints <- c(0, 30, 60, 90, 120, 150, 180)
roi1Col <- "#E7298A"
roi2Col <- "#66A61E"
roi3Col <- "#7570B3"
for(i in 1:dim(roi1)[2]){
plot(timePoints, roi1[,i], ylab="signal intensity", xlab="time (seconds)",
main=str_c("experiment ", i), type="l", lty=1, col=roi1Col,
ylim=c(0,roi1prebleach[i]))
abline(h=roi1prebleach[i], col=roi1Col, lty=3)
lines(timePoints, roi2[,i], lty=1, col=roi2Col)
abline(h=roi2prebleach[i], col=roi2Col, lty=3)
lines(timePoints, roi3[,i], lty=1, col=roi3Col)
abline(h=roi3prebleach[i], col=roi3Col, lty=3)
}
roi1BS <- roi1-roi3
roi1prebleachBS <- roi1prebleach - roi3prebleach
roi2BS <- roi2-roi3
roi2prebleachBS <- roi2prebleach - roi3prebleach
bd <- (roi1prebleachBS-roi1BS[1,])/roi1prebleachBS
bd <- data.frame(t(bd))
names(bd) <- c("Bleach Depth")
knitr::kable(bd)
boxplot(bd, ylab="Bleach Depth")
apply(roi2BS,2,mean)
na.action
na.action()
?mean
apply(roi2BS,2,mean, na.rm=T)
apply(roi2BS,2,mean, na.rm=T)/roi2prebleachBS
gr <- roi2BS[1,]/roi2prebleachBS
gr <- apply(roi2BS,2,mean, na.rm=T)/roi2prebleachBS
gr <- data.frame(t(gr))
names(gr) <- c("Gap ratio")
knitr::kable(gr)
gr <- roi2BS[1,]/roi2prebleachBS
gr <- apply(roi2BS,2,mean, na.rm=T)/roi2prebleachBS
#gr <- roi2BS[1,]/roi2prebleachBS
gr <- apply(roi2BS,2,mean, na.rm=T)/roi2prebleachBS
is.vector(gr)
is.list(gr)
gr
names(gr)
gr <- data.frame(gr)
names(gr) <- c("Gap ratio")
gr
shiny::runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?which
?is.member
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
continuousVars <- c("Age (years)",
"PD duration (years)",
"ALdh1L1 expression in substantia nigra",
"Aldh1L1 expression in parietal cortex",
"Aldh1l1 expression in striatum of basal ganglia",
"Cx43 expression in substantia nigra",
"Cx43 expression in parietal cortex",
"Cx43 expression in striatum of basal ganglia",
"GDNF expression in substantia nigra",
"GDNF expression in parietal cortex",
"GDNF expression in striatum of basal ganglia",
"GFAP expression in substantia nigra",
"GFAP expression in parietal cortex",
"GFAP expression in striatum of basal ganglia",
"Puncta per cell in caudate nucleus of basal ganglia",
"Puncta per cell in globus pallidus of basal ganglia",
"Puncta per cell in putamen of basal ganglia",
"Puncta per cell in frontal cortex",
"Puncta per cell in insular cortex",
"Puncta per cell in substantia nigra",
"Puncta per cell in parietal cortex")
is.element("Age (years)", continuousVars)
x <- c("PD duration (years)","Cx43 expression in substantia nigra","Puncta per cell in parietal cortex")
is.element(x, continuousVars)
is.element(continuousVars, x)
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
library(corrplot)
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
install.packages("Hmisc")
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?rcorr
x <- c(-2, -1, 0, 1, 2)
y <- c(4,   1, 0, 1, 4)
z <- c(1,   2, 3, 4, NA)
v <- c(1,   2, 3, 4, 5)
rcorr(cbind(x,y,z,v))
x <- c(-2, -1, 0, 1, 2)
y <- c(4,   1, 0, 1, 4)
z <- c(1,   2, 3, 4, NA)
v <- c(1,   2, 3, 4, 5)
rcorr(cbind(x,y,z,v), use="pairwise.complete.obs")
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?sliderInput
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?corrplot
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?rcorr
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?downloadButton
?rcorr
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?boxplot
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?geom_boxplot
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?get
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
?ggplot
?fill
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
library(RColorBrewer)
brewer.pal("Dark2")
brewer.pal(,"Dark2")
brewer.pal(1,"Dark2")
brewer.pal(3,"Dark2")
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
display.brewer.pal()
display.brewer.pal("all")
display.brewer.all()
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
runApp('git_repositories/Hastings-PD-Cx43-shiny/pd')
ls()
dat <- read.csv("data/data.csv", row.names=1)
getwd()
setwd("git_repostitories")
setwd("git_repositories")
list.files()
setwd("Hastings-PD-Cx43-shiny" )
dat <- read.csv("data/data.csv", row.names=1)
list.files()
setwd("pd")
dat <- read.csv("data/data.csv", row.names=1)
names(dat)
summary(as.factor(dat$Group))
table(dat$Group)
table(dat$Depression)
table(dat$LB.disease.type)
x <- table(dat$LB.disease.type)
is.data.frame(x)
is.matrix(x)
is.table(x)
xtabs(~LB.disease.type, data = )
xtabs(~LB.disease.type, dat)
data.table(xtabs(~LB.disease.type, dat))
DT::datatable(xtabs(~LB.disease.type, dat))
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)))
?DT::datable
?DT::datatable
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)), filter=F)
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)), filter="none")
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)))
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)), filter="none")
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)),   options = list(
info = FALSE,
paging = FALSE,
searching = FALSE))
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat, na.action = NULL)),   options = list(
info = FALSE,
paging = FALSE,
searching = FALSE))
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat, addNA=T,na.action = NULL)),   options = list(
info = FALSE,
paging = FALSE,
searching = FALSE))
runApp()
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)))
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat)), options = list(info = FALSE, paging = FALSE, searching = FALSE))
DT::datatable(as.data.frame(xtabs(~LB.disease.type, dat, addNA=T, na.action = NULL)), options = list(info = FALSE, paging = FALSE, searching = FALSE))
runApp()
runApp()
DT::datatable(as.data.frame(xtabs(~LB.disease.type+grouping(), dat, addNA=T,na.action = NULL)),   options = list(
info = FALSE,
paging = FALSE,
searching = FALSE))
DT::datatable(as.data.frame(xtabs(~LB.disease.type+Group, dat, addNA=T,na.action = NULL)),   options = list(
info = FALSE,
paging = FALSE,
searching = FALSE))
DT::datatable(as.data.frame(xtabs(~LB.disease.type+Age, dat, addNA=T,na.action = NULL)),   options = list(
info = FALSE,
paging = FALSE,
searching = FALSE))
?get
runApp()
names(dat)
na.omit(dat, cols="Puncta.BGCaud")
runApp()
